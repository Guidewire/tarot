package com.guidewire.tarot.sim

import org.joda.time.{DateTime, Interval}
import com.guidewire.tarot.{Config, UID, SuiteKind}

class CollectiveSuiteGenerator(config:Config, suiteKindToGenerator:Map[UID[_], SuiteGenerator with InjectableSuiteGenerator])
  extends SuiteGenerator
  with    InjectableSuiteGenerator
{
  //Ensure every suite kind is represented. If it's not there, then use a PoissonSuiteGenerator.
  private[this] val generators = for {
    (suite_kind_uid, _) <- config.suiteKinds
    generator = suiteKindToGenerator.getOrElse(suite_kind_uid, new PoissonSuiteGenerator(config))
  } yield suite_kind_uid -> generator

  def injectAdditionalSimulatedSuites(suiteKind: UID[_], count: Int): Unit = {
    generators.get(suiteKind).get.injectAdditionalSimulatedSuites(suiteKind, count)
  }

  /** Returns time and [[com.guidewire.tarot.SuiteKind]] of each (virtual) suite entering
    * the queue
    *
    * The suites themselves are not created; only the information on their
    * arrivals are produced.
    *
    * The suite arrivals are generated by a generator specific to the suite kind.
    *
    * @param interval Time within which suite arrivals are simulated
    */
  def apply(interval: Interval): Seq[(DateTime, UID[_])] = {
    assert(interval.toDurationMillis() >= 1L)

    val results = (
      for {
        (suite_kind_uid, _) <- config.suiteKinds
        generator = generators.get(suite_kind_uid).get
        suite <- generator(interval)
      } yield suite
    ).toSeq

    results
  }
}
