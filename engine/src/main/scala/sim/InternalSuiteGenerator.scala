package com.guidewire.tarot.sim

import scala.annotation.tailrec
import org.joda.time.{DateTime, Interval}

import com.guidewire.tarot.{Config, UID}

/** Simulates inbound suites for internal simulator */
class InternalSuiteGenerator(config: Config) extends SuiteGenerator {
  private[this]
  def pickRandomKey[K, V](map: Map[K, V]): K =
    map.keySet.toIndexedSeq(config.random.nextInt(map.size))

  /** A very simple but inefficient algorithm for sampling a Poisson
    * distribution with a given lambda (average arrival time).
    *
    * @param lambda The average "arrival" time of the Poisson distribution.
    * @return Returns the sampled value of the Poisson distribution.
    */
  private[this]
  def samplePoisson(lambda: Double): Int = {
    val cutoff = math.exp(-lambda)

    // Multiplies random doubles until the cutoff, which is paramterized
    // by the given lambda, is reached.
    @tailrec
    def counter(curr: Double, count: Int): Int =
      if (curr > cutoff)
        counter(curr * config.random.nextDouble(), count + 1)
      else
        count

    counter(1.0, 0)
  }

  /** Returns time and [[SuiteKind]] of each (virtual) suite entering
    * the queue
    *
    * The suites themselves are not created; only the information on their
    * arrivals are produced.
    *
    * The suite arrivals are generated by a Poisson distribution
    *
    * @param interval Time within which suite arrivals are simulated
    */
  def apply(interval: Interval): Seq[(DateTime, UID[_])] = {
    assert(interval.toDurationMillis() >= 1L)
    if (config.suiteKinds.size == 0)
      return Seq()
    val length: Double = (interval.toDurationMillis() - 1L).toDouble
    // The sampled number of suites that will appear in this interval
    val numSuites: Int = samplePoisson(length * config.averageSuiteArrivalRate)
    for (_ <- 0 until numSuites)
    yield {
      // Pick a random point in the interval at which to queue the test suite
      val dur: Long = (config.random.nextDouble() * length).round
      val suiteTime = interval.getStart().plus(dur)
      // Pick a random kind of test
      val suiteKindUID = pickRandomKey(config.suiteKinds)
      (suiteTime, suiteKindUID)
    }
  }
}
